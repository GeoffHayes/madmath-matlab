function trackerTest()


    latitudes = [45.4111700000,...
45.4111695787,...
45.4111691573,...
45.4111687360,...
45.4111683147,...
45.4111678933,...
45.4111674720,...
45.4111670507,...
45.4111666293,...
45.4111662080,...
45.4111657867,...
45.4111653654,...
45.4111649440,...
45.4111645227,...
45.4111641014,...
45.4111636800,...
45.4111632587,...
45.4111628374,...
45.4111624160,...
45.4111619947,...
45.4111615734,...
45.4111611520,...
45.4111607307,...
45.4111603094,...
45.4111598880,...
45.4111594667,...
45.4111590454,...
45.4111586241,...
45.4111582027,...
45.4111577814,...
45.4090220260,...
45.4049600249,...
45.3993693892,...
45.3927973265,...
45.3858870850,...
45.3793150068,...
45.3737243460,...
45.3696623200,...
45.3675265496,...
45.3675261289,...
45.3675257082,...
45.3675252875,...
45.3675248668,...
45.3675244461,...
45.3675240254,...
45.3675236047,...
45.3675231840,...
45.3675227633,...
45.3675223426,...
45.3675219219,...
45.3675215012,...
45.3675210806,...
45.3675206599,...
45.3675202392,...
45.3675198185,...
45.3675193978,...
45.3675189771,...
45.3675185564,...
45.3675181357,...
45.3675177150,...
45.3675172943,...
45.3675168736,...
45.3675164529,...
45.3675160322,...
45.3675156115,...
45.3675151908,...
45.3675147701,...
45.3675143494,...
45.3675139287,...
45.3675135081,...
45.3696485174,...
45.3737099926,...
45.3793003627,...
45.3858723605,...
45.3927826020,...
45.3993545843,...
45.4049449290,...
45.4090063787,...
45.4111413719,...
45.4111409506];
    
    longitudes = [-75.6981200000,...
-75.6883091740,...
-75.6784983481,...
-75.6686875222,...
-75.6588766965,...
-75.6490658707,...
-75.6392550451,...
-75.6294442195,...
-75.6196333940,...
-75.6098225686,...
-75.6000117433,...
-75.5902009180,...
-75.5803900928,...
-75.5705792677,...
-75.5607684426,...
-75.5509576176,...
-75.5411467927,...
-75.5313359679,...
-75.5215251431,...
-75.5117143184,...
-75.5019034938,...
-75.4920926692,...
-75.4822818448,...
-75.4724710204,...
-75.4626601960,...
-75.4528493718,...
-75.4430385476,...
-75.4332277235,...
-75.4234168995,...
-75.4136060755,...
-75.4042757791,...
-75.3963395237,...
-75.3905740653,...
-75.3875433358,...
-75.3875433358,...
-75.3905733450,...
-75.3963361970,...
-75.4042675145,...
-75.4135909865,...
-75.4233942652,...
-75.4331975437,...
-75.4430008222,...
-75.4528041006,...
-75.4626073789,...
-75.4724106572,...
-75.4822139354,...
-75.4920172135,...
-75.5018204915,...
-75.5116237695,...
-75.5214270474,...
-75.5312303252,...
-75.5410336030,...
-75.5508368806,...
-75.5606401583,...
-75.5704434358,...
-75.5802467132,...
-75.5900499906,...
-75.5998532679,...
-75.6096565452,...
-75.6194598224,...
-75.6292630995,...
-75.6390663765,...
-75.6488696534,...
-75.6586729303,...
-75.6684762071,...
-75.6782794839,...
-75.6880827605,...
-75.6978860371,...
-75.7076893136,...
-75.7174925901,...
-75.7268164108,...
-75.7347482941,...
-75.7405117125,...
-75.7435420719,...
-75.7435420719,...
-75.7405109919,...
-75.7347449664,...
-75.7268081445,...
-75.7174774991,...
-75.7076666781];
       
    time = 100000;

    refLat = 0;
    refLon = 0;

    trk = Track2DPV();

    for i=1:size(latitudes,2)

        if i==1
            refLat = latitudes(i)*pi/180.0;
            refLon = longitudes(i)*pi/180.0;
        end

        [range, azi, azi2, err] = getRangeAzimuth(...
            refLat, refLon, latitudes(i)*pi/180.0, longitudes(i)*pi/180.0);

        x = range*sin(azi);
        y = range*cos(azi);

        obs = Observation2DP();
        obs.initTimeSecs = time;
        obs.z = [x y]';
        obs.R = [50 0; 0 50];

        time = time + 30.0; 

        if i==1
            % initialize the track with the observation depending upon the
            % observation type
            if isa(obs,'Observation2DP')
                trk = trk.init(obs);
            else
                % cheat and initialize the track with the initial location
                % and speeds of the target
                temp              = Track2DPV();
                temp.x            = targetTruth{i}.state;
                temp.initTimeSecs = obs.initTimeSecs;
                trk               = trk.init(temp);

                 % predict the track to the time of the observation
                trk = trk.predict(obs.initTimeSecs);

                % update the track with the observation
                trk = trk.update(obs);
            end
        else
            % predict the track to the time of the observation
            trk = trk.predict(obs.initTimeSecs);

            % update the track with the observation
            trk = trk.update(obs);
        end

        %tracks{i} = trk;

        % output the speed and course
        speed  = sqrt(trk.x(3)^2 + trk.x(4)^2);
        course = atan2(trk.x(3), trk.x(4))*180.0/pi;

        fprintf('speed=%.6f  course=%.6f\n', speed, course);



    end         

end

